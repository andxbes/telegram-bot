const md5 = require('js-md5');

function debounce(fn, waitTime) {
    let cache = new Map();
    let isUpdating = false;
    let pendingCalls = [];

    return async function (...args) {
        const key = md5(args);
        const now = Date.now();

        if (cache.has(key) && (now - cache.get(key).time) < waitTime) {
            return cache.get(key).result;
        }

        if (isUpdating) {
            return new Promise((resolve) => {
                pendingCalls.push({ args, resolve });
            });
        }

        isUpdating = true;

        const result = await fn(...args);
        cache.set(key, { result, time: now });

        for (const { args, resolve } of pendingCalls) {
            const cachedResult = cache.get(md5(args));
            resolve(cachedResult ? cachedResult.result : result);
        }
        pendingCalls = [];

        isUpdating = false;

        return result;
    };
}

function getformatDateTime(unixTimestamp) {
    const date = new Date(unixTimestamp * 1000);

    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0'); // –ú–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º 1
    const day = String(date.getDate()).padStart(2, '0');

    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');

    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}

function getformatTime(unixTimestamp) {
    const date = new Date(unixTimestamp * 1000);
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    // const seconds = String(date.getSeconds()).padStart(2, '0');

    return `${hours}:${minutes}`;
}


function filter_messages(messages) {
    const true_key_words = [
        'ü•í', 'üçÜ', 'ü•¶', '‚úÖ', 'üü¢', '‚õîÔ∏è', '‚òÄÔ∏è', 'üò°', 'üåº', 'ü´í', 'üü•', 'üö®', 'üõë', '‚òÄÔ∏è',
        'üåû', 'üëå', '‚ùå', 'ü™Ä', 'üå≥', 'üëπ', 'üíö', 'ü§¨', 'üß∂', 'üåµ', 'üöì', 'üöß', 'üê∏', 'üëÆ‚Äç‚ôÇ'
    ];

    const true_words = [
        '–≥—Ä—è–∑–Ω–æ', '–≥—Ä—è–∑—å', '–∫—Ä–µ–ø—è—Ç', '–Ø–º—ã', '–¢—É—á–∏',
        '—á–∏—Å—Ç–æ', '—á–∏—Å—Ç–æ—Ç–∞', '—á–∏—Å—Ç', '—á–∏—Å—Ç—ã–π',
        '—á–∏–∑—Ç', '—Ç–∏—Ö–æ', '–Ω–æ—Ä–º', '–≤ –Ω–æ—Ä–º–µ', '–æ–∫', 'ok',
        '–æ–ª–∏–≤–æ–∫', '–æ–ª–∏–≤–∫–∏', '–æ–ª–∏–≤–∫–∞–º–∏',
        '–∑–µ–ª–µ–Ω—ã—Ö', '–∑–µ–ª–µ–Ω—å', '–∑–µ–ª–µ–Ω–∏', '—Å–∏–Ω–∏–µ', '—Å–∏–Ω–∏—Ö', '—É—Ö–∏–ª—è–Ω—Ç', '–ø–∏–∫—Å–µ–ª—è', '—á–µ—Ä–Ω—ã–µ',
        '–ø—Ä–æ–≤–µ—Ä—è—é—Ç', '—É–ø–∞–∫–æ–≤–∞–ª–∏', '–ø—Ä–µ—Å—É—é—Ç', '–ø—Ä–µ—Å—É—é—Ç—å',
        '–ø—Ä–æ–≤–µ—Ä–∫–∞', '–ø–µ—à–∏–µ',
        '–≤–Ω–∏–º–∞–Ω–∏–µ', '–ø–∞—Ç—Ä—É–ª—å', '–ø–∞—Ç—Ä—É–ª—å–∫–∞', '—Ç—Ü–∫', '–∫–æ–ø—ã',
        '—á–µ—Ä—Ç–∏', '–≥–Ω–∏–ª–∏', '–≥–Ω–∏–ª—å',
        '–≤–æ–ª–≥–∞', '–Ω–∏–≤–∞', '–±—É—Å', '–¥–µ–≤—è—Ç–∫–∞', '–≤–æ–ª–≥–∞', '–∞–º—É–ª–µ—Ç',
        '–Ω–∞[\\s]+–≤–æ–µ–Ω–Ω—ã—Ö[\\s]+–Ω–æ–º–µ—Ä–∞—Ö',
        '–≤–æ–∏–Ω—ã[\\s]+–¥–æ–±—Ä–∞'
    ];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    const true_regex = new RegExp(`(^|[\\s])(${true_words.join('|')})([\\s\\!\\.\\,]+|$)`, 'i');

    // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞
    const false_key_words = ['?', '—Å—ä–µ–±—ë—Ç—Å—è'];
    const false_words = [
        '–±–ª—è', '–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ', '–∞ –∫–∞–∫–æ–π', '–≤ –∞—Ö—É–µ', '–ø–æ—Ö',
        '–µ—Å–ª–∏', '—á–µ–≤–æ', '—á–µ–≥–æ', '—à–æ—Ç–∞–∫', '–Ω–∞—Ö—É–π', '–±–ª—ç—Ç',
        '–≤–∞–π–±', '–ø–æ—á–µ–º—É', '–¥–æ–ª–±–æ–µ–±', '–¥–∞–ª–±–∞–µ–±', '—Ö—É–π', '–ø–∏–¥–∞—Ä', '—Å—ä–µ–±—ë—Ç—Å—è',
        '–≤–æ–±—â–µ–º', '–º–µ–Ω—è', '–¥–æ–ª–≥–æ', '–∑–Ω–∞–∫–æ–º–æ–≥–æ', '–≥–æ–≤–æ—Ä–∏–ª–∏', '–º–Ω–µ', '–∑–∞–µ–±–∞–ª', '–ø–µ—Ä–µ–¥[\\s]—Ç–µ–º',
        '–ø–æ—Ç–æ–º—É[\\s]—á—Ç–æ', '–∫–∞–∂–¥–æ–º—É', '—á—É–≤—Å—Ç–≤–æ–≤–∞–ª', '–±–µ–∂–∞—Ç—å', '—á—É–≤—Å—Ç–≤–æ–≤–∞–ª',
        '–¥–ª—è', '–¥–∞–∂–µ', '—Ñ–∏–ª—å–º', '–∞–∫—Ç—ë—Ä—ã', '–±—É–¥—É[\\s]–∑–Ω–∞—Ç—å',
        '–≤–∞—Ä–∏–∞–Ω—Ç', '—Ä–∞–∑–≤–ª–µ–∫–∞–π—Å—è', '–ø–µ—Ä–µ—Ä–≤–∞', '–ø–∏–≤–æ', '–≤–æ–¥–∫–∞', '–≤–æ–¥–∫–∏', '—Ç—ã'
    ];
    const false_regex = new RegExp(`(^|[\\s])(${false_words.join('|')})([\\s\\?\\.\\,\\!]|$)`, 'i');

    messages = messages.filter((message) => {
        const msg = message?.message;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ "?"
        const hasFalseKeyWord = false_key_words.some(word => msg.includes(word));

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
        const passesTrueCheck = (true_key_words.some(word => msg.includes(word)) || true_regex.test(msg));
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
        const passesFalseCheck = hasFalseKeyWord || false_regex.test(msg);

        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏ –Ω–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞, –æ—Ç–∫–ª–æ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const isValidMessage = msg?.length < 120 && (passesTrueCheck && !passesFalseCheck);

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        // console.log(`Message: "${msg}"`);
        // console.log(`Passes True Check: ${ passesTrueCheck } `);
        // console.log(`Passes False Check: ${ passesFalseCheck } `);
        // console.log(`Is Valid Message: ${ isValidMessage } `);

        return isValidMessage;
    });

    return messages;
}


module.exports = { getformatDateTime, getformatTime, filter_messages, debounce };